C représente l'ensemble des sommets que l'on couvre.
Donc je suppose que C fait la taille de n et on ajoute au fur et à mesure
    des sommets (jusqu'a tous les mettre ?)


v0 représente le premier sommet (sommet à l'id le plus petit).


Si c'est un graphe simple on remplit E, sinon on remplit coord.
Puis le A on le remplit dans la méthode arbrecouvrant.

A vide est retranscrit via le fait que les valeurs de A dans notre code soit init
à false.



e est une arete/arc, ses extrémités sont notées e = (oe,de).




e* est l'arete de plus petit poids dans omega(c)
e* = Argminc(e) veut dire que e* est (e appartenant à omega(C)).

omega(c) représente l'ensemble des aretes parmi les sommets couverts (C).



test permettant de savoir quelle extrémités on rajoute et que devient omega(C)

oe* c'est l'extrémité debut de l'arete e*
et de* l'extrémité fin




Empecher les doublons dans omega c, utiliser une structure de données qui empeche les doublons


Dans un graphe euclidien on ne stocke pas les poids car on peut les calculer a partir
    des coordonnées.
Par ex, pour l'arete aux sommets A et B, le poids est :
    (B_y - A_y) / (B_x - A_x)



DANS SON FICHIER EUCLIDIEN DE FDP CA COMMENCE PAS A 0 LES SOMMETS MAIS A 1, QUEL ENCULE

non seulement y'a 8 points pour 3 sommets, mais en plus les id de sommets n'ont pas 1 d'écart et ne
commence pas à 0. YEEES

Donc comme la boucle d'itération i j ne peut pas fonctionner sur ce type de graphe,
alors on va refaire une autre boucle pour traiter le type 2.

Dans le fichier graphe euclidien on a les aretes, une arete i,j avec sommet i et j.


Dans un graphe euclidient, un sommet c'est pas un nombre, c'est une coordonnée.
Du coup y'a bien autant de sommet que de coordonnée.

Dans le graphe euclien, comment parcourir les aretes ?